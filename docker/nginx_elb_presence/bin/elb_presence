#!/usr/bin/python

import argparse
import os
import signal
import sys
import time
import urllib2
import requests

import boto.ec2.elb

parser = argparse.ArgumentParser(description='Register the local EC2 instance in an ELB')
parser.add_argument('--lbname', metavar='<NAME>', default=os.environ.get('ELB_NAME'),
                    help='Name of AWS ELB that should be used for registration')
parser.add_argument('--region', metavar='<REGION>', default=os.environ.get('AWS_REGION'),
                    help='AWS region in which the ELB resides')
parser.add_argument('--access-key', metavar='<ACCESS>', default=os.environ.get('AWS_ACCESS_KEY'))
parser.add_argument('--secret-key', metavar='<SECRET>', default=os.environ.get('AWS_SECRET_KEY'))
parser.add_argument('--current-dns', metavar='<CURRENT-DNS>', default=os.environ.get('CURRENT_DNS'))
args = parser.parse_args()

conn = boto.ec2.elb.connect_to_region(args.region,
                                      aws_access_key_id=args.access_key,
                                      aws_secret_access_key=args.secret_key)

instance = urllib2.urlopen('http://169.254.169.254/latest/meta-data/instance-id').read()
nginx_url = 'http://%s:8080' % urllib2.urlopen('http://169.254.169.254/latest/meta-data/local-ipv4').read()


def deregister_func(lbname, instance, exit=False):
    def handler(*args, **kwargs):
        print "Deregistering instance {} from ELB {}".format(instance, lbname)
        conn.deregister_instances(lbname, [instance])
        if exit:
            sys.exit(0)
    return handler


def register_func(lbname, instance, exit=False):
    def handler(*args, **kwargs):
        print "Registering instance {} from ELB {}".format(instance, lbname)
        conn.register_instances(lbname, [instance])
        if exit:
            sys.exit(0)
    return handler


deregister = deregister_func(args.lbname, instance)
register = register_func(args.lbname, instance)
deregister_from_signal = deregister_func(args.lbname, instance, exit=True)


while True:
    # curl nginx
    try:
        response = requests.head(nginx_url, headers={
            'Host': args.current_dns
        }, timeout=1)

        if response.headers.get('x-app-version'):  # if running
            register()
        else:
            deregister()
    except (requests.exceptions.Timeout, requests.exceptions.ConnectionError):
        deregister()

    time.sleep(5)


signal.signal(signal.SIGTERM, deregister_from_signal)
signal.signal(signal.SIGINT, deregister_from_signal)
